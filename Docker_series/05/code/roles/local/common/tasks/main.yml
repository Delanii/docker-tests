---

- name: install pre-requirements
  apt:
    pkg:
      - unzip
      - rng-tools
      - software-properties-common
      - python3
      - python3-pip
    state: present

- name: Copy rngd systemd template
  template:
    src: rngd.service.j2
    dest: /etc/systemd/system/rngd.service
    owner: root
    group: root
    mode: 0644

- name: Ensure that the rngd service is enabled and started at boot time
  service:
    name: rngd
    enabled: yes
    state: started

- name: Check if aditional disk exist
  stat:
    path: "/dev/{{ item }}"
  register: extra_disks
  with_items: "{{ potential_extra_disk }}"

- name: set existing disks to new fact
  set_fact:
    extra_disks: >-
      {%- set results = [] -%}
      {%- for disk in extra_disks -%}
        {%- if (disk.stat.exists == True) -%}
        {%- set d = disk -%}
        {%- set _ = results.append(d) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ results }}

- name: debug var
  debug:
    var: extra_disks

#- name: Format extra disks
#  parted:
#    device: "/dev/{{ item }}"
#    number: 1
#    flags: [ lvm ]
#    state: present
#  when: "extra_disks.{{ item }}.stat.exists == True"
#  with_items: "{{ potential_extra_disk }}"
#
#- name: create volume groups for extra disks
#  lvg:
#    vg: "vg.{{ item }}"
#    pvs: "/dev/{{ item }}"
#  when: "extra_disks.{{ item }}.stat.exists == True"
#  with_items: "{{ potential_extra_disk }}"
#
#- name: check what volume groups exist
#  stat:
#    path: "/dev/vg.{{ item }}"
#  register: volume_groups
#  with_items: "{{ potential_extra_disk }}"
#
#- name: create logical volume for volume groups
#  lvol:
#    vg: "vg.{{ item }}"
#    lv: "lv.{{ item }}"
#    size: +100%FREE
#    state: present
#  when: volume_groups.stat.exists == True
#  with_items: "{{ potential_extra_disk }}"
#
#- name: format data volume
#  filesystem:
#    fstype: xfs
#    dev: /dev/vg.data/data
#  when: sdb.stat.exists == True
#
#- name: create data dir
#  file:
#    path: /data
#    state: directory
#  when: sdb.stat.exists == True
#
#- name: mount data disk in data dir
#  mount:
#    path: /data
#    src: /dev/vg.data/data
#    fstype: xfs
#    state: mounted
#  when: sdb.stat.exists == True

- name: Update the /etc/hosts file with node name
  tags: etchostsupdate
  become: yes
  become_user: root
  lineinfile:
    path: "/etc/hosts"
    regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}\t{{ hostvars[item]['ansible_hostname']}}"
    state: present
  register: etchostsupdate
  with_items: "{{groups['all']}}"